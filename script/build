#!/usr/bin/env bash
# SPDX-License-Identifier: AGPL-3.0-only

set -efuxo pipefail

# TODO: Parse command line arguments.
release=0

mkdir --parents build

################################################################################
# Generate static configuration

{
    echo "// @generated by $0."
    echo 'module snowflake.config;'
    # Environment variables set by Nix shell.
    echo "enum BASH_PATH = \`$SNOWFLAKE_BASH_PATH\`;"
    echo "enum COREUTILS_PATH = \`$SNOWFLAKE_COREUTILS_PATH\`;"
} > build/config.d

################################################################################
# Build software

ldc2Flags=(
    -preview=shortenedMethods  # `=>` syntax.
    -dip1000                   # Escape analysis.
    -L-lblake3                 # Link with libblake3.
)

if (( $release )); then
    ldc2Flags+=(
        -O3        # Optimize code.
        --release  # Disable assertions.
    )
else
    ldc2Flags+=(
        -g  # Include debug symbols.
    )
fi

find source -name '*.d' -type f -print0 | \
    xargs -0 ldc2 -of=build/snowflake "${ldc2Flags[@]}" build/config.d

find source -name '*.d' -type f -print0 | \
    xargs -0 ldc2 -of=build/unittest "${ldc2Flags[@]}" -unittest build/config.d

################################################################################
# Run unit tests

build/unittest

################################################################################
# Build manual

sphinxBuildFlags=(
    -a            # Disable cache (it's broken).
    -W            # Warnings as errors.
    --keep-going  # Do not stop at first warning.
)

sphinx-build "${sphinxBuildFlags[@]}" manual build/manual

################################################################################
# Check that each file contains a license identifier

script/check-license
